[bits 16]            ; Установить работу в 16-битном режиме
org 0x7C00           ; Начало загрузки в 0x7C00

start:
    ; Устанавливаем сегмент данных в 0
    xor ax, ax
    mov ds, ax

    ; Очистка экрана
    mov ax, 0x0600   ; Функция прокрутки BIOS
    mov bh, 0x07     ; Атрибут: черный фон и белый текст
    mov cx, 0x0000   ; Координаты верхнего левого угла
    mov dx, 0x184F   ; Координаты нижнего правого угла (80x25 экран)
    int 0x10         ; Вызов видео-сервиса BIOS для прокрутки

    ; Установить позицию курсора в верхний левый угол
    mov ah, 0x02     ; Функция BIOS для установки позиции курсора
    mov bh, 0x00     ; Страница дисплея
    mov dh, 0x00     ; Ряд (0 - верхний)
    mov dl, 0x00     ; Столбец (0 - левый)
    int 0x10         ; Вызов видео-сервиса BIOS

    ; Выводим сообщение
    mov si, message  ; SI указывает на адрес сообщения

.print_char:
    lodsb            ; Загружаем байт из DS:SI в AL, потом увеличиваем SI
    test al, al      ; Проверяем, конец строки (нулевой байт)?
    jz .done         ; Если да, перейти к завершению
    ; Вывод символа на экран
    mov ah, 0x0E     ; Функция вывода через BIOS
    int 0x10         ; Вызов видео-сервиса BIOS
    jmp .print_char  ; Повторяем для следующего символа

.done:
    ; Входим в бесконечный цикл
    hlt              ; Останавливаем процессор
    jmp .done

message db 'Hello, 8086-kernel!', 0 ; Сообщение для вывода, завершается нулем

times 510 - ($ - $$) db 0  ; Заполняем нулями до 510 байт
dw 0xAA55                  ; Подпись загрузочного сектора
